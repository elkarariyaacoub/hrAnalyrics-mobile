"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/wheel-gestures";
exports.ids = ["vendor-chunks/wheel-gestures"];
exports.modules = {

/***/ "(ssr)/./node_modules/wheel-gestures/dist/wheel-gestures.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/wheel-gestures/dist/wheel-gestures.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WheelGestures: () => (/* binding */ WheelGestures),\n/* harmony export */   absMax: () => (/* binding */ absMax),\n/* harmony export */   addVectors: () => (/* binding */ addVectors),\n/* harmony export */   average: () => (/* binding */ average),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   configDefaults: () => (/* binding */ configDefaults),\n/* harmony export */   deepFreeze: () => (/* binding */ deepFreeze),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   lastOf: () => (/* binding */ lastOf),\n/* harmony export */   projection: () => (/* binding */ projection)\n/* harmony export */ });\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar DECAY = 0.996;\n/**\r\n * movement projection based on velocity\r\n * @param velocityPxMs\r\n * @param decay\r\n */\n\nvar projection = function projection(velocityPxMs, decay) {\n  if (decay === void 0) {\n    decay = DECAY;\n  }\n\n  return velocityPxMs * decay / (1 - decay);\n};\n\nfunction lastOf(array) {\n  return array[array.length - 1];\n}\nfunction average(numbers) {\n  return numbers.reduce(function (a, b) {\n    return a + b;\n  }) / numbers.length;\n}\nvar clamp = function clamp(value, min, max) {\n  return Math.min(Math.max(min, value), max);\n};\nfunction addVectors(v1, v2) {\n  if (v1.length !== v2.length) {\n    throw new Error('vectors must be same length');\n  }\n\n  return v1.map(function (val, i) {\n    return val + v2[i];\n  });\n}\nfunction absMax(numbers) {\n  return Math.max.apply(Math, numbers.map(Math.abs));\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nfunction deepFreeze(o) {\n  Object.freeze(o);\n  Object.values(o).forEach(function (value) {\n    if (value !== null && typeof value === 'object' && !Object.isFrozen(value)) {\n      deepFreeze(value);\n    }\n  });\n  return o;\n}\n\nfunction EventBus() {\n  var listeners = {};\n\n  function on(type, listener) {\n    listeners[type] = (listeners[type] || []).concat(listener);\n    return function () {\n      return off(type, listener);\n    };\n  }\n\n  function off(type, listener) {\n    listeners[type] = (listeners[type] || []).filter(function (l) {\n      return l !== listener;\n    });\n  }\n\n  function dispatch(type, data) {\n    if (!(type in listeners)) return;\n    listeners[type].forEach(function (l) {\n      return l(data);\n    });\n  }\n\n  return deepFreeze({\n    on: on,\n    off: off,\n    dispatch: dispatch\n  });\n}\n\nfunction WheelTargetObserver(eventListener) {\n  var targets = []; // add event listener to target element\n\n  var observe = function observe(target) {\n    target.addEventListener('wheel', eventListener, {\n      passive: false\n    });\n    targets.push(target);\n    return function () {\n      return unobserve(target);\n    };\n  }; /// remove event listener from target element\n\n\n  var unobserve = function unobserve(target) {\n    target.removeEventListener('wheel', eventListener);\n    targets = targets.filter(function (t) {\n      return t !== target;\n    });\n  }; // stops watching all of its target elements for visibility changes.\n\n\n  var disconnect = function disconnect() {\n    targets.forEach(unobserve);\n  };\n\n  return deepFreeze({\n    observe: observe,\n    unobserve: unobserve,\n    disconnect: disconnect\n  });\n}\n\nvar LINE_HEIGHT = 16 * 1.125;\nvar PAGE_HEIGHT = typeof window !== 'undefined' && window.innerHeight || 800;\nvar DELTA_MODE_UNIT = [1, LINE_HEIGHT, PAGE_HEIGHT];\nfunction normalizeWheel(e) {\n  var deltaX = e.deltaX * DELTA_MODE_UNIT[e.deltaMode];\n  var deltaY = e.deltaY * DELTA_MODE_UNIT[e.deltaMode];\n  var deltaZ = (e.deltaZ || 0) * DELTA_MODE_UNIT[e.deltaMode];\n  return {\n    timeStamp: e.timeStamp,\n    axisDelta: [deltaX, deltaY, deltaZ]\n  };\n}\nvar reverseAll = [-1, -1, -1];\nfunction reverseAxisDeltaSign(wheel, reverseSign) {\n  if (!reverseSign) {\n    return wheel;\n  }\n\n  var multipliers = reverseSign === true ? reverseAll : reverseSign.map(function (shouldReverse) {\n    return shouldReverse ? -1 : 1;\n  });\n  return _extends({}, wheel, {\n    axisDelta: wheel.axisDelta.map(function (delta, i) {\n      return delta * multipliers[i];\n    })\n  });\n}\nvar DELTA_MAX_ABS = 700;\nvar clampAxisDelta = function clampAxisDelta(wheel) {\n  return _extends({}, wheel, {\n    axisDelta: wheel.axisDelta.map(function (delta) {\n      return clamp(delta, -DELTA_MAX_ABS, DELTA_MAX_ABS);\n    })\n  });\n};\n\nvar __DEV__ = \"development\" !== 'production';\nvar ACC_FACTOR_MIN = 0.6;\nvar ACC_FACTOR_MAX = 0.96;\nvar WHEELEVENTS_TO_MERGE = 2;\nvar WHEELEVENTS_TO_ANALAZE = 5;\n\nvar configDefaults = /*#__PURE__*/deepFreeze({\n  preventWheelAction: true,\n  reverseSign: [true, true, false]\n});\n\nvar WILL_END_TIMEOUT_DEFAULT = 400;\nfunction createWheelGesturesState() {\n  return {\n    isStarted: false,\n    isStartPublished: false,\n    isMomentum: false,\n    startTime: 0,\n    lastAbsDelta: Infinity,\n    axisMovement: [0, 0, 0],\n    axisVelocity: [0, 0, 0],\n    accelerationFactors: [],\n    scrollPoints: [],\n    scrollPointsToMerge: [],\n    willEndTimeout: WILL_END_TIMEOUT_DEFAULT\n  };\n}\n\nfunction WheelGestures(optionsParam) {\n  if (optionsParam === void 0) {\n    optionsParam = {};\n  }\n\n  var _EventBus = EventBus(),\n      on = _EventBus.on,\n      off = _EventBus.off,\n      dispatch = _EventBus.dispatch;\n\n  var config = configDefaults;\n  var state = createWheelGesturesState();\n  var currentEvent;\n  var negativeZeroFingerUpSpecialEvent = false;\n  var prevWheelEventState;\n\n  var feedWheel = function feedWheel(wheelEvents) {\n    if (Array.isArray(wheelEvents)) {\n      wheelEvents.forEach(function (wheelEvent) {\n        return processWheelEventData(wheelEvent);\n      });\n    } else {\n      processWheelEventData(wheelEvents);\n    }\n  };\n\n  var updateOptions = function updateOptions(newOptions) {\n    if (newOptions === void 0) {\n      newOptions = {};\n    }\n\n    if (Object.values(newOptions).some(function (option) {\n      return option === undefined || option === null;\n    })) {\n      __DEV__ && console.error('updateOptions ignored! undefined & null options not allowed');\n      return config;\n    }\n\n    return config = deepFreeze(_extends({}, configDefaults, config, newOptions));\n  };\n\n  var publishWheel = function publishWheel(additionalData) {\n    var wheelEventState = _extends({\n      event: currentEvent,\n      isStart: false,\n      isEnding: false,\n      isMomentumCancel: false,\n      isMomentum: state.isMomentum,\n      axisDelta: [0, 0, 0],\n      axisVelocity: state.axisVelocity,\n      axisMovement: state.axisMovement,\n\n      get axisMovementProjection() {\n        return addVectors(wheelEventState.axisMovement, wheelEventState.axisVelocity.map(function (velocity) {\n          return projection(velocity);\n        }));\n      }\n\n    }, additionalData);\n\n    dispatch('wheel', _extends({}, wheelEventState, {\n      previous: prevWheelEventState\n    })); // keep reference without previous, otherwise we would create a long chain\n\n    prevWheelEventState = wheelEventState;\n  }; // should prevent when there is mainly movement on the desired axis\n\n\n  var shouldPreventDefault = function shouldPreventDefault(deltaMaxAbs, axisDelta) {\n    var _config = config,\n        preventWheelAction = _config.preventWheelAction;\n    var deltaX = axisDelta[0],\n        deltaY = axisDelta[1],\n        deltaZ = axisDelta[2];\n    if (typeof preventWheelAction === 'boolean') return preventWheelAction;\n\n    switch (preventWheelAction) {\n      case 'x':\n        return Math.abs(deltaX) >= deltaMaxAbs;\n\n      case 'y':\n        return Math.abs(deltaY) >= deltaMaxAbs;\n\n      case 'z':\n        return Math.abs(deltaZ) >= deltaMaxAbs;\n\n      default:\n        __DEV__ && console.warn('unsupported preventWheelAction value: ' + preventWheelAction, 'warn');\n        return false;\n    }\n  };\n\n  var processWheelEventData = function processWheelEventData(wheelEvent) {\n    var _clampAxisDelta = clampAxisDelta(reverseAxisDeltaSign(normalizeWheel(wheelEvent), config.reverseSign)),\n        axisDelta = _clampAxisDelta.axisDelta,\n        timeStamp = _clampAxisDelta.timeStamp;\n\n    var deltaMaxAbs = absMax(axisDelta);\n\n    if (wheelEvent.preventDefault && shouldPreventDefault(deltaMaxAbs, axisDelta)) {\n      wheelEvent.preventDefault();\n    }\n\n    if (!state.isStarted) {\n      start();\n    } // check if user started scrolling again -> cancel\n    else if (state.isMomentum && deltaMaxAbs > Math.max(2, state.lastAbsDelta * 2)) {\n        end(true);\n        start();\n      } // special finger up event on windows + blink\n\n\n    if (deltaMaxAbs === 0 && Object.is && Object.is(wheelEvent.deltaX, -0)) {\n      negativeZeroFingerUpSpecialEvent = true; // return -> zero delta event should not influence velocity\n\n      return;\n    }\n\n    currentEvent = wheelEvent;\n    state.axisMovement = addVectors(state.axisMovement, axisDelta);\n    state.lastAbsDelta = deltaMaxAbs;\n    state.scrollPointsToMerge.push({\n      axisDelta: axisDelta,\n      timeStamp: timeStamp\n    });\n    mergeScrollPointsCalcVelocity(); // only wheel event (move) and not start/end get the delta values\n\n    publishWheel({\n      axisDelta: axisDelta,\n      isStart: !state.isStartPublished\n    }); // state.isMomentum ? MOMENTUM_WHEEL : WHEEL, { axisDelta })\n    // publish start after velocity etc. have been updated\n\n    state.isStartPublished = true; // calc debounced end function, to recognize end of wheel event stream\n\n    willEnd();\n  };\n\n  var mergeScrollPointsCalcVelocity = function mergeScrollPointsCalcVelocity() {\n    if (state.scrollPointsToMerge.length === WHEELEVENTS_TO_MERGE) {\n      state.scrollPoints.unshift({\n        axisDeltaSum: state.scrollPointsToMerge.map(function (b) {\n          return b.axisDelta;\n        }).reduce(addVectors),\n        timeStamp: average(state.scrollPointsToMerge.map(function (b) {\n          return b.timeStamp;\n        }))\n      }); // only update velocity after a merged scrollpoint was generated\n\n      updateVelocity(); // reset toMerge array\n\n      state.scrollPointsToMerge.length = 0; // after calculation of velocity only keep the most recent merged scrollPoint\n\n      state.scrollPoints.length = 1;\n\n      if (!state.isMomentum) {\n        detectMomentum();\n      }\n    } else if (!state.isStartPublished) {\n      updateStartVelocity();\n    }\n  };\n\n  var updateStartVelocity = function updateStartVelocity() {\n    state.axisVelocity = lastOf(state.scrollPointsToMerge).axisDelta.map(function (d) {\n      return d / state.willEndTimeout;\n    });\n  };\n\n  var updateVelocity = function updateVelocity() {\n    // need to have two recent points to calc velocity\n    var _state$scrollPoints = state.scrollPoints,\n        latestScrollPoint = _state$scrollPoints[0],\n        prevScrollPoint = _state$scrollPoints[1];\n\n    if (!prevScrollPoint || !latestScrollPoint) {\n      return;\n    } // time delta\n\n\n    var deltaTime = latestScrollPoint.timeStamp - prevScrollPoint.timeStamp;\n\n    if (deltaTime <= 0) {\n      __DEV__ && console.warn('invalid deltaTime');\n      return;\n    } // calc the velocity per axes\n\n\n    var velocity = latestScrollPoint.axisDeltaSum.map(function (d) {\n      return d / deltaTime;\n    }); // calc the acceleration factor per axis\n\n    var accelerationFactor = velocity.map(function (v, i) {\n      return v / (state.axisVelocity[i] || 1);\n    });\n    state.axisVelocity = velocity;\n    state.accelerationFactors.push(accelerationFactor);\n    updateWillEndTimeout(deltaTime);\n  };\n\n  var updateWillEndTimeout = function updateWillEndTimeout(deltaTime) {\n    // use current time between events rounded up and increased by a bit as timeout\n    var newTimeout = Math.ceil(deltaTime / 10) * 10 * 1.2; // double the timeout, when momentum was not detected yet\n\n    if (!state.isMomentum) {\n      newTimeout = Math.max(100, newTimeout * 2);\n    }\n\n    state.willEndTimeout = Math.min(1000, Math.round(newTimeout));\n  };\n\n  var accelerationFactorInMomentumRange = function accelerationFactorInMomentumRange(accFactor) {\n    // when main axis is the the other one and there is no movement/change on the current one\n    if (accFactor === 0) return true;\n    return accFactor <= ACC_FACTOR_MAX && accFactor >= ACC_FACTOR_MIN;\n  };\n\n  var detectMomentum = function detectMomentum() {\n    if (state.accelerationFactors.length >= WHEELEVENTS_TO_ANALAZE) {\n      if (negativeZeroFingerUpSpecialEvent) {\n        negativeZeroFingerUpSpecialEvent = false;\n\n        if (absMax(state.axisVelocity) >= 0.2) {\n          recognizedMomentum();\n          return;\n        }\n      }\n\n      var recentAccelerationFactors = state.accelerationFactors.slice(WHEELEVENTS_TO_ANALAZE * -1); // check recent acceleration / deceleration factors\n      // all recent need to match, if any did not match\n\n      var detectedMomentum = recentAccelerationFactors.every(function (accFac) {\n        // when both axis decelerate exactly in the same rate it is very likely caused by momentum\n        var sameAccFac = !!accFac.reduce(function (f1, f2) {\n          return f1 && f1 < 1 && f1 === f2 ? 1 : 0;\n        }); // check if acceleration factor is within momentum range\n\n        var bothAreInRangeOrZero = accFac.filter(accelerationFactorInMomentumRange).length === accFac.length; // one the requirements must be fulfilled\n\n        return sameAccFac || bothAreInRangeOrZero;\n      });\n\n      if (detectedMomentum) {\n        recognizedMomentum();\n      } // only keep the most recent events\n\n\n      state.accelerationFactors = recentAccelerationFactors;\n    }\n  };\n\n  var recognizedMomentum = function recognizedMomentum() {\n    state.isMomentum = true;\n  };\n\n  var start = function start() {\n    state = createWheelGesturesState();\n    state.isStarted = true;\n    state.startTime = Date.now();\n    prevWheelEventState = undefined;\n    negativeZeroFingerUpSpecialEvent = false;\n  };\n\n  var willEnd = function () {\n    var willEndId;\n    return function () {\n      clearTimeout(willEndId);\n      willEndId = setTimeout(end, state.willEndTimeout);\n    };\n  }();\n\n  var end = function end(isMomentumCancel) {\n    if (isMomentumCancel === void 0) {\n      isMomentumCancel = false;\n    }\n\n    if (!state.isStarted) return;\n\n    if (state.isMomentum && isMomentumCancel) {\n      publishWheel({\n        isEnding: true,\n        isMomentumCancel: true\n      });\n    } else {\n      publishWheel({\n        isEnding: true\n      });\n    }\n\n    state.isMomentum = false;\n    state.isStarted = false;\n  };\n\n  var _WheelTargetObserver = WheelTargetObserver(feedWheel),\n      observe = _WheelTargetObserver.observe,\n      unobserve = _WheelTargetObserver.unobserve,\n      disconnect = _WheelTargetObserver.disconnect;\n\n  updateOptions(optionsParam);\n  return deepFreeze({\n    on: on,\n    off: off,\n    observe: observe,\n    unobserve: unobserve,\n    disconnect: disconnect,\n    feedWheel: feedWheel,\n    updateOptions: updateOptions\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WheelGestures);\n\n//# sourceMappingURL=wheel-gestures.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wheel-gestures/dist/wheel-gestures.esm.js\n");

/***/ })

};
;